#!/bin/bash
#
# Executes all the tests located in the `test` directory
# using Bats (https://bats-core.readthedocs.io/en/stable/usage.html).

set -euo pipefail

# Fails by printing the provided message and exiting with 1.
#
# Globals:
#   none
# Arguments:
#   $@ - echo arguments
function fail() {
  echo " $(tput setaf 1)‚úò$(tput sgr0)" "$@" >&2
  exit 1
}

# Bakes a new Docker image
#
# Arguments:
#   $@ - `docker buildx bake` arguments
# Outputs:
#   STDOUT - image ID
#   STDERR - build progress
function bake_local() {
  echo "üê≥ building Docker image:" "$@" >&2
  if ! docker buildx bake "$@"; then
    fail "Failed to bake Docker image"
  fi
  docker images --format='{{.ID}}' | head -1
}

# Runs the specified tests using Bats.
#
# Globals:
#   TERM - used to determine the terminal capabilities (default: xterm-256color)
#   BATS_CMD - Bats command to use to run tests (default: ./bats)
#   BATS_TMPDIR - base temporary directory used by Bats (default: build/bats-tmp)
#   DOCKER_BAKE - if set, its value is passed to `docker buildx bake` (example: DOCKER_BAKE=--set=*.tags=test)
# Arguments:
#   $@ - bats arguments
# bashsupport disable=BP2001,BP5006
function main() {
  TERM="${TERM:-xterm-256color}"

  [ -n "${BATS_CMD:-}" ] || export BATS_CMD='./batsw'
  [ -e "${BATS_CMD}" ] || fail "'${BATS_CMD}' does not exist"
  [ -f "${BATS_CMD}" ] || fail "'${BATS_CMD}' is no file"
  [ -e "${BATS_CMD}" ] || chmod +x "${BATS_CMD}" || fail "'${BATS_CMD}' is no executable"

  local -a BATS_ARGS=()
  while (("$#")); do
    case "$1" in
      -o | --output)
        if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
          mkdir -p "$2"
          # shellcheck disable=SC2064
          trap "rmdir '$2' || true" EXIT # delete if empty on exit
          BATS_ARGS+=("$1" "$2")
          shift 2
        else
          echo " $(tput setaf 1)‚úò$(tput sgr0) missing argument for $1" >&2
          exit 1
        fi
        ;;
      *)
        BATS_ARGS+=("$1")
        shift
        ;;
    esac
  done

  [ -n "${BATS_TMPDIR:-}" ] || export BATS_TMPDIR="build/bats-tmp"
  [ -e "${BATS_TMPDIR}" ] && rm -rf "${BATS_TMPDIR:?}"
  [ -e "${BATS_TMPDIR}" ] || mkdir -p "${BATS_TMPDIR}" || fail "'${BATS_TMPDIR}' could not be created"
  # shellcheck disable=SC2064
  trap "rmdir '${BATS_TMPDIR}' || true" EXIT # delete if empty on exit

  echo "$(tput setaf 2)‚ñ∂‚ñ∂$(tput sgr0) $(tput bold)TEST RUN$(tput sgr0)"
  echo "$(tput setaf 7) ‚Ñπ$(tput sgr0) working directory: $PWD"
  echo "$(tput setaf 7) ‚Ñπ$(tput sgr0) bats command line:" "${BATS_CMD}" "${BATS_ARGS[@]+"${BATS_ARGS[@]}"}"

  if [ -n "${DOCKER_BAKE:-}" ]; then
    local -r baked_tag="$(bake_local "${DOCKER_BAKE[@]+"${DOCKER_BAKE[@]}"}")"
    echo "üê≥ built Docker image: ${baked_tag}"
  fi

  # call bats
  "${BATS_CMD}" "${BATS_ARGS[@]+"${BATS_ARGS[@]}"}"
}

main "$@"
